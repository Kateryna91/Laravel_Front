{"ast":null,"code":"import axios from 'axios';\nimport http from '../../../http_common';\nimport jwt from 'jsonwebtoken';\nimport { AuthActionTypes } from './types';\nimport setAuthToken from '../../../helpers/setAuthToken';\nexport const LoginUser = data => async dispatch => {\n  try {\n    const response = await http.post(\"api/auth/login\", data); // посилаєм форму на сервер і отримуєм результат\n\n    const {\n      access_token\n    } = response.data; //присвоюєм отриманий токен по інтерфейсу ILoginResponse\n    //const {user} = response.data;\n    //console.log(user);\n\n    setAuthUserByToken(access_token, dispatch); //передаєм токен і діспатч в окрему функцію \n\n    return Promise.resolve(); // повертаєм проміс\n  } catch (err) {\n    if (axios.isAxiosError(err)) {\n      // перевіряєм чи аксіос ловить помилки сервера\n      const serverError = err; //присвоюєм їх\n\n      if (serverError && serverError.response) {\n        const {\n          errors\n        } = serverError.response.data;\n        return Promise.reject(errors); //повертаєм проміс з помилками\n      }\n    }\n\n    return Promise.reject(); // якщо вони не в аксіосі повертаєм пустий хибний проміс\n  }\n};\nexport const setAuthUserByToken = (token, dispatch) => {\n  localStorage.access_token = token; // кідаєм його в храніліще\n\n  setAuthToken(token);\n  const user = jwt.decode(token); // декодуєм його для витягнення даних\n\n  dispatch({\n    // кідаєм в діспатч тип події і юзера\n    type: AuthActionTypes.LOGIN,\n    payload: {\n      email: user.email\n    }\n  });\n};\nexport const LogoutUser = () => {\n  return async dispatch => {\n    try {\n      setAuthToken(''); // знищуєм токен\n\n      dispatch({\n        type: AuthActionTypes.LOGOUT\n      }); //кідаєм в діспатч подію\n\n      localStorage.removeItem('access_token'); // видаляєм токен з локал стореджа\n    } catch (error) {}\n  };\n};\n_c = LogoutUser;\n\nvar _c;\n\n$RefreshReg$(_c, \"LogoutUser\");","map":{"version":3,"sources":["D:/Laravel_Front/src/components/auth/Login/actions.ts"],"names":["axios","http","jwt","AuthActionTypes","setAuthToken","LoginUser","data","dispatch","response","post","access_token","setAuthUserByToken","Promise","resolve","err","isAxiosError","serverError","errors","reject","token","localStorage","user","decode","type","LOGIN","payload","email","LogoutUser","LOGOUT","removeItem","error"],"mappings":"AAAA,OAAOA,KAAP,MAAkC,OAAlC;AAEA,OAAOC,IAAP,MAAiB,sBAAjB;AACA,OAAOC,GAAP,MAAgB,cAAhB;AACA,SAAqBC,eAArB,QAAmF,SAAnF;AACA,OAAOC,YAAP,MAAyB,+BAAzB;AAQA,OAAO,MAAMC,SAAS,GAAIC,IAAD,IAAuB,MAAOC,QAAP,IAA0C;AACxF,MAAI;AACF,UAAMC,QAAQ,GAAG,MAAMP,IAAI,CAACQ,IAAL,CAA0B,gBAA1B,EAA4CH,IAA5C,CAAvB,CADE,CACwE;;AAC1E,UAAM;AAACI,MAAAA;AAAD,QAAiBF,QAAQ,CAACF,IAAhC,CAFE,CAEoC;AACtC;AACA;;AAGAK,IAAAA,kBAAkB,CAACD,YAAD,EAAeH,QAAf,CAAlB,CAPE,CAO0C;;AAE5C,WAAOK,OAAO,CAACC,OAAR,EAAP,CATE,CASwB;AAE3B,GAXD,CAWE,OAAOC,GAAP,EAAiB;AACf,QAAId,KAAK,CAACe,YAAN,CAAmBD,GAAnB,CAAJ,EAA6B;AAAE;AAC3B,YAAME,WAAW,GAAGF,GAApB,CADyB,CAC4B;;AAErD,UAAIE,WAAW,IAAIA,WAAW,CAACR,QAA/B,EAAyC;AACrC,cAAM;AAAES,UAAAA;AAAF,YAAaD,WAAW,CAACR,QAAZ,CAAqBF,IAAxC;AACA,eAAOM,OAAO,CAACM,MAAR,CAAeD,MAAf,CAAP,CAFqC,CAEN;AAClC;AACJ;;AAED,WAAOL,OAAO,CAACM,MAAR,EAAP,CAVe,CAUU;AAE5B;AACF,CAzBM;AA4BP,OAAO,MAAMP,kBAAkB,GAAG,CAACQ,KAAD,EAAgBZ,QAAhB,KAA4C;AAC9Ea,EAAAA,YAAY,CAACV,YAAb,GAA4BS,KAA5B,CAD8E,CAC3C;;AACnCf,EAAAA,YAAY,CAACe,KAAD,CAAZ;AACA,QAAME,IAAI,GAAGnB,GAAG,CAACoB,MAAJ,CAAWH,KAAX,CAAb,CAH8E,CAGrC;;AACzCZ,EAAAA,QAAQ,CAAC;AAAE;AACTgB,IAAAA,IAAI,EAAEpB,eAAe,CAACqB,KADf;AAEPC,IAAAA,OAAO,EAAE;AACLC,MAAAA,KAAK,EAAEL,IAAI,CAACK;AADP;AAFF,GAAD,CAAR;AAMC,CAVM;AAYP,OAAO,MAAMC,UAAU,GAAG,MAAM;AAChC,SAAO,MAAOpB,QAAP,IAA0C;AAC/C,QAAI;AACFH,MAAAA,YAAY,CAAC,EAAD,CAAZ,CADE,CACgB;;AAChBG,MAAAA,QAAQ,CAAC;AAAEgB,QAAAA,IAAI,EAAEpB,eAAe,CAACyB;AAAxB,OAAD,CAAR,CAFA,CAE4C;;AAC5CR,MAAAA,YAAY,CAACS,UAAb,CAAwB,cAAxB,EAHA,CAGwC;AAC3C,KAJD,CAIE,OAAOC,KAAP,EAAc,CAEf;AACF,GARD;AASC,CAVM;KAAMH,U","sourcesContent":["import axios, { AxiosError } from 'axios';\r\nimport { Dispatch } from 'react';\r\nimport http from '../../../http_common';\r\nimport jwt from 'jsonwebtoken';\r\nimport { AuthAction, AuthActionTypes, ILoginModel, ILoginServerError, IUser } from './types';\r\nimport setAuthToken from '../../../helpers/setAuthToken';\r\nimport { ILoginErrors } from './types';\r\n\r\nexport interface ILoginResponse {\r\n    access_token: string\r\n    //user: { email: string}\r\n}\r\n\r\nexport const LoginUser = (data: ILoginModel) => async (dispatch: Dispatch<AuthAction>) => {\r\n  try {\r\n    const response = await http.post<ILoginResponse>(\"api/auth/login\", data); // посилаєм форму на сервер і отримуєм результат\r\n    const {access_token} = response.data; //присвоюєм отриманий токен по інтерфейсу ILoginResponse\r\n    //const {user} = response.data;\r\n    //console.log(user);\r\n\r\n\r\n    setAuthUserByToken(access_token, dispatch); //передаєм токен і діспатч в окрему функцію \r\n    \r\n    return Promise.resolve(); // повертаєм проміс\r\n    \r\n  } catch (err: any) {\r\n      if (axios.isAxiosError(err)) { // перевіряєм чи аксіос ловить помилки сервера\r\n          const serverError = err as AxiosError<ILoginErrors>; //присвоюєм їх\r\n\r\n          if (serverError && serverError.response) {\r\n              const { errors } = serverError.response.data;\r\n              return Promise.reject(errors); //повертаєм проміс з помилками\r\n          }\r\n      }\r\n      \r\n      return Promise.reject(); // якщо вони не в аксіосі повертаєм пустий хибний проміс\r\n      \r\n  }\r\n}\r\n\r\n\r\nexport const setAuthUserByToken = (token: string, dispatch: Dispatch<any>) => {\r\nlocalStorage.access_token = token; // кідаєм його в храніліще\r\nsetAuthToken(token);\r\nconst user = jwt.decode(token) as IUser; // декодуєм його для витягнення даних\r\ndispatch({ // кідаєм в діспатч тип події і юзера\r\n  type: AuthActionTypes.LOGIN, \r\n  payload: {\r\n      email: user.email,\r\n  }\r\n});  \r\n}\r\n\r\nexport const LogoutUser = () => {\r\nreturn async (dispatch: Dispatch<AuthAction>) => {\r\n  try {\r\n    setAuthToken(''); // знищуєм токен\r\n      dispatch({ type: AuthActionTypes.LOGOUT }); //кідаєм в діспатч подію\r\n      localStorage.removeItem('access_token') // видаляєм токен з локал стореджа\r\n  } catch (error) {\r\n      \r\n  }\r\n}\r\n}"]},"metadata":{},"sourceType":"module"}