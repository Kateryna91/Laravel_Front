{"ast":null,"code":"import axios from 'axios';\nimport http from '../../../http_common';\nimport jwt from 'jsonwebtoken';\nimport { AuthActionTypes, ILoginResponse } from './types';\nimport setAuthToken from '../../../helpers/setAuthToken';\nexport const LoginUser = data => async dispatch => {\n  try {\n    const response = await http.post(\"api/auth/login\", data);\n    const {\n      access_token\n    } = response.data; //const user: IUser = { email: response.data.user.email};\n\n    console.log(\"response \", response.data);\n    setAuthUserByToken(access_token, dispatch);\n    return Promise.resolve();\n  } catch (err) {\n    if (axios.isAxiosError(err)) {\n      const serverError = err;\n\n      if (serverError && serverError.response) {\n        const {\n          errors\n        } = serverError.response.data;\n        return Promise.reject(errors);\n      }\n    }\n\n    return Promise.reject();\n  }\n};\nexport const setAuthUserByToken = (token, dispatch) => {\n  const dataUser = jwt.decode(token, {\n    json: true\n  });\n  setAuthToken(token);\n  localStorage.access_token = token;\n  console.log(\"local storage \", localStorage);\n  console.log(\"data\", dataUser.email);\n  const user = {\n    email: \"panda\"\n  };\n  dispatch({\n    type: AuthActionTypes.LOGIN,\n    payload: user\n  });\n};\nexport const LogoutUser = () => {\n  return async dispatch => {\n    try {\n      setAuthToken('');\n      dispatch({\n        type: AuthActionTypes.LOGOUT\n      });\n      localStorage.removeItem('access_token');\n    } catch (error) {}\n  };\n};\n_c = LogoutUser;\n\nvar _c;\n\n$RefreshReg$(_c, \"LogoutUser\");","map":{"version":3,"sources":["D:/Laravel_Front/src/components/auth/Login/actions.ts"],"names":["axios","http","jwt","AuthActionTypes","ILoginResponse","setAuthToken","LoginUser","data","dispatch","response","post","access_token","console","log","setAuthUserByToken","Promise","resolve","err","isAxiosError","serverError","errors","reject","token","dataUser","decode","json","localStorage","email","user","type","LOGIN","payload","LogoutUser","LOGOUT","removeItem","error"],"mappings":"AAAA,OAAOA,KAAP,MAAkC,OAAlC;AAEA,OAAOC,IAAP,MAAiB,sBAAjB;AACA,OAAOC,GAAP,MAAgB,cAAhB;AACA,SAAqBC,eAArB,EAAmDC,cAAnD,QAAmG,SAAnG;AACA,OAAOC,YAAP,MAAyB,+BAAzB;AASA,OAAO,MAAMC,SAAS,GAAIC,IAAD,IAAuB,MAAOC,QAAP,IAA0C;AAClF,MAAI;AACF,UAAMC,QAAQ,GAAG,MAAMR,IAAI,CAACS,IAAL,CAA0B,gBAA1B,EAA4CH,IAA5C,CAAvB;AACA,UAAM;AAACI,MAAAA;AAAD,QAAiBF,QAAQ,CAACF,IAAhC,CAFE,CAGF;;AACAK,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBJ,QAAQ,CAACF,IAAlC;AACAO,IAAAA,kBAAkB,CAACH,YAAD,EAAeH,QAAf,CAAlB;AAEA,WAAOO,OAAO,CAACC,OAAR,EAAP;AAED,GATD,CASE,OAAOC,GAAP,EAAiB;AACf,QAAIjB,KAAK,CAACkB,YAAN,CAAmBD,GAAnB,CAAJ,EAA6B;AAC3B,YAAME,WAAW,GAAGF,GAApB;;AACA,UAAIE,WAAW,IAAIA,WAAW,CAACV,QAA/B,EAAyC;AACvC,cAAM;AAAEW,UAAAA;AAAF,YAAaD,WAAW,CAACV,QAAZ,CAAqBF,IAAxC;AACA,eAAOQ,OAAO,CAACM,MAAR,CAAeD,MAAf,CAAP;AACD;AACF;;AAEA,WAAOL,OAAO,CAACM,MAAR,EAAP;AAEJ;AACR,CAtBM;AAyBP,OAAO,MAAMP,kBAAkB,GAAG,CAACQ,KAAD,EAAiBd,QAAjB,KAA6C;AAE3E,QAAMe,QAAQ,GAAGrB,GAAG,CAACsB,MAAJ,CAAWF,KAAX,EAAkB;AAAEG,IAAAA,IAAI,EAAE;AAAR,GAAlB,CAAjB;AACApB,EAAAA,YAAY,CAACiB,KAAD,CAAZ;AACAI,EAAAA,YAAY,CAACf,YAAb,GAA4BW,KAA5B;AAEAV,EAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8Ba,YAA9B;AACAd,EAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBU,QAAQ,CAAEI,KAA9B;AAEA,QAAMC,IAAW,GAAG;AAAED,IAAAA,KAAK,EAAE;AAAT,GAApB;AACAnB,EAAAA,QAAQ,CAAC;AACPqB,IAAAA,IAAI,EAAE1B,eAAe,CAAC2B,KADf;AAEPC,IAAAA,OAAO,EAAEH;AAFF,GAAD,CAAR;AAMD,CAhBI;AAkBP,OAAO,MAAMI,UAAU,GAAG,MAAM;AAC5B,SAAO,MAAOxB,QAAP,IAA0C;AAC7C,QAAI;AACFH,MAAAA,YAAY,CAAC,EAAD,CAAZ;AACEG,MAAAA,QAAQ,CAAC;AAAEqB,QAAAA,IAAI,EAAE1B,eAAe,CAAC8B;AAAxB,OAAD,CAAR;AACAP,MAAAA,YAAY,CAACQ,UAAb,CAAwB,cAAxB;AACH,KAJD,CAIE,OAAOC,KAAP,EAAc,CAEf;AACJ,GARD;AASH,CAVM;KAAMH,U","sourcesContent":["import axios, { AxiosError } from 'axios';\r\nimport { Dispatch } from 'react';\r\nimport http from '../../../http_common';\r\nimport jwt from 'jsonwebtoken';\r\nimport { AuthAction, AuthActionTypes, ILoginModel, ILoginResponse, ILoginServerError, IUser } from './types';\r\nimport setAuthToken from '../../../helpers/setAuthToken';\r\n\r\n\r\nexport interface ILoginResponse {\r\n    access_token: string\r\n    //user: { email: string}\r\n}\r\n\r\n\r\nexport const LoginUser = (data: ILoginModel) => async (dispatch: Dispatch<AuthAction>) => {\r\n        try {\r\n          const response = await http.post<ILoginResponse>(\"api/auth/login\", data);\r\n          const {access_token} = response.data;\r\n          //const user: IUser = { email: response.data.user.email};\r\n          console.log(\"response \", response.data)\r\n          setAuthUserByToken(access_token, dispatch);\r\n          \r\n          return Promise.resolve();\r\n\r\n        } catch (err: any) {\r\n            if (axios.isAxiosError(err)) {\r\n              const serverError = err as AxiosError<ILoginErrors>;\r\n              if (serverError && serverError.response) {\r\n                const { errors } = serverError.response.data;\r\n                return Promise.reject(errors);\r\n              }\r\n            }\r\n            \r\n             return Promise.reject();\r\n          \r\n        }\r\n}\r\n\r\n\r\nexport const setAuthUserByToken = (token: string , dispatch: Dispatch<any>) => {\r\n\r\n    const dataUser = jwt.decode(token, { json: true });\r\n    setAuthToken(token);\r\n    localStorage.access_token = token;\r\n\r\n    console.log(\"local storage \", localStorage);\r\n    console.log(\"data\", dataUser!.email)\r\n\r\n    const user: IUser = { email: \"panda\"};\r\n    dispatch({\r\n      type: AuthActionTypes.LOGIN,\r\n      payload: user,\r\n    });\r\n  \r\n  \r\n  }\r\n\r\nexport const LogoutUser = () => {\r\n    return async (dispatch: Dispatch<AuthAction>) => {\r\n        try {\r\n          setAuthToken('');\r\n            dispatch({ type: AuthActionTypes.LOGOUT });\r\n            localStorage.removeItem('access_token')\r\n        } catch (error) {\r\n            \r\n        }\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}