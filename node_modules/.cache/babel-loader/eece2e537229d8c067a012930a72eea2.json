{"ast":null,"code":"var _jsxFileName = \"D:\\\\Laravel_Front\\\\src\\\\components\\\\auth\\\\Login\\\\index.tsx\",\n    _s = $RefreshSig$();\n\nimport { Form, FormikProvider, useFormik } from \"formik\";\nimport React, { useState } from \"react\";\nimport { LoginSchema } from \"./validation\";\nimport { InputGroup } from \"../../common/InputGroup\";\nimport { useActions } from \"../../../hooks/useActions\";\nimport { useNavigate } from \"react-router\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst LoginPage = () => {\n  _s();\n\n  const {\n    LoginUser\n  } = useActions();\n  const navigator = useNavigate();\n  const [invalid, setInvalid] = useState(\"\");\n  const initialValues = {\n    email: \"\",\n    password: \"\",\n    invalid: \"\"\n  };\n\n  const onHandleSubmit = async (values, _ref) => {\n    let {\n      setFieldError\n    } = _ref;\n    console.log(\"Form submit: \", values);\n\n    try {\n      await LoginUser(values);\n      navigator(\"/\");\n    } catch (ex) {\n      const serverError = ex;\n      Object.entries(serverError).forEach(_ref2 => {\n        let [key, value] = _ref2;\n\n        if (Array.isArray(value)) {\n          let message = \"\";\n          value.forEach(item => {\n            message += `${item} `;\n          });\n          setFieldError(key, message); //console.log(key, message);\n        }\n      });\n\n      if (serverError.error) {\n        setInvalid(serverError.error);\n      }\n    }\n  };\n\n  const formik = useFormik({\n    initialValues: initialValues,\n    validationSchema: LoginSchema,\n    onSubmit: onHandleSubmit\n  });\n  const {\n    errors,\n    touched,\n    handleChange,\n    handleSubmit\n  } = formik;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"row\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"col-md-6 offset-md-3\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Login page\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), invalid && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"alert alert-danger\",\n        children: invalid\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(FormikProvider, {\n        value: formik,\n        children: /*#__PURE__*/_jsxDEV(Form, {\n          onSubmit: handleSubmit,\n          children: [/*#__PURE__*/_jsxDEV(InputGroup, {\n            field: \"email\",\n            label: \"\\u041F\\u043E\\u0448\\u0442\\u0430\",\n            error: errors.email,\n            touched: touched.email,\n            onChange: handleChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(InputGroup, {\n            field: \"password\",\n            label: \"\\u041F\\u0430\\u0440\\u043E\\u043B\\u044C\",\n            type: \"password\",\n            touched: touched.password,\n            error: errors.password,\n            onChange: handleChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            className: \"btn btn-success\",\n            children: \"\\u0412\\u0445\\u0456\\u0434\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n};\n\n_s(LoginPage, \"CqtE04l2Q25mhj6Yvn9SXFVdzF4=\", false, function () {\n  return [useActions, useNavigate, useFormik];\n});\n\n_c = LoginPage;\nexport default LoginPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"LoginPage\");","map":{"version":3,"sources":["D:/Laravel_Front/src/components/auth/Login/index.tsx"],"names":["Form","FormikProvider","useFormik","React","useState","LoginSchema","InputGroup","useActions","useNavigate","LoginPage","LoginUser","navigator","invalid","setInvalid","initialValues","email","password","onHandleSubmit","values","setFieldError","console","log","ex","serverError","Object","entries","forEach","key","value","Array","isArray","message","item","error","formik","validationSchema","onSubmit","errors","touched","handleChange","handleSubmit"],"mappings":"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","sourcesContent":["import { Form, FormikHelpers, FormikProvider, useFormik } from \"formik\";\nimport React, { useState } from \"react\";\nimport { ILoginModel, ILoginServerError } from \"./types\";\nimport { LoginSchema } from \"./validation\";\nimport { InputGroup } from \"../../common/InputGroup\";\nimport { useActions } from \"../../../hooks/useActions\";\nimport { useNavigate } from \"react-router\";\n\n\nconst LoginPage = () => {\n  const { LoginUser } = useActions();\n  const navigator = useNavigate();\n\n  const [invalid, setInvalid] = useState(\"\");  \n\n  const initialValues: ILoginModel = {\n    email: \"\",\n    password: \"\",\n    invalid: \"\"\n  };\n\n  const onHandleSubmit = async (values: ILoginModel, {setFieldError}: FormikHelpers<ILoginModel>) => {\n    console.log(\"Form submit: \", values);\n    try {\n      await LoginUser(values);\n      navigator(\"/\");\n    }\n    catch (ex) {\n      const serverError = ex as ILoginServerError;\n      Object.entries(serverError).forEach(([key, value])=> {\n          if(Array.isArray(value))\n          {\n              let message = \"\";\n              value.forEach((item)=> { message+=`${item} `; });\n              setFieldError(key, message);\n              //console.log(key, message);\n          }\n      });\n      if(serverError.error)\n      {\n        setInvalid(serverError.error);\n      }\n    }\n  };\n\n  const formik = useFormik({\n    initialValues: initialValues,\n    validationSchema: LoginSchema,\n    onSubmit: onHandleSubmit,\n  });\n\n  const { errors, touched, handleChange, handleSubmit } = formik;\n\n  return (\n    <div className=\"row\">\n      <div className=\"col-md-6 offset-md-3\">\n        <h1>Login page</h1>\n        \n        {invalid && <div className=\"alert alert-danger\">{invalid}</div>}\n\n        <FormikProvider value={formik}>\n          <Form onSubmit={handleSubmit}>\n            <InputGroup\n              field=\"email\"\n              label=\"Пошта\"\n              error={errors.email}\n              touched={touched.email}\n              onChange={handleChange}\n            />\n\n            <InputGroup\n              field=\"password\"\n              label=\"Пароль\"\n              type=\"password\"\n              touched={touched.password}\n              error={errors.password}\n              onChange={handleChange}\n            />\n\n            <button type=\"submit\" className=\"btn btn-success\">\n              Вхід\n            </button>\n          </Form>\n        </FormikProvider>\n      </div>\n    </div>\n  );\n};\n\nexport default LoginPage;\n"]},"metadata":{},"sourceType":"module"}