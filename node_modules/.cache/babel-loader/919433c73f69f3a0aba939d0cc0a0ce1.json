{"ast":null,"code":"import axios from 'axios';\nimport http from '../../../http_common';\nimport jwt from 'jsonwebtoken';\nimport { AuthActionTypes } from './types';\nexport const LoginUser = data => async dispatch => {\n  try {\n    const response = await http.post(\"api/auth/login\", data);\n    const {\n      access_token\n    } = response.data;\n    localStorage.girl = access_token;\n    AuthUser(access_token, dispatch);\n    return Promise.resolve();\n  } catch (ex) {\n    if (axios.isAxiosError(ex)) {\n      const serverError = ex;\n\n      if (serverError && serverError.response) {\n        const {\n          data\n        } = serverError.response;\n        return Promise.reject(data);\n      }\n    }\n\n    return Promise.reject(ex);\n  }\n};\nexport const AuthUser = (token, dispatch) => {\n  const user = jwt.decode(token);\n  dispatch({\n    type: AuthActionTypes.LOGIN_AUTH,\n    payload: user\n  });\n};\n_c = AuthUser;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthUser\");","map":{"version":3,"sources":["D:/Laravel_Front/src/components/auth/Login/actions.ts"],"names":["axios","http","jwt","AuthActionTypes","LoginUser","data","dispatch","response","post","access_token","localStorage","girl","AuthUser","Promise","resolve","ex","isAxiosError","serverError","reject","token","user","decode","type","LOGIN_AUTH","payload"],"mappings":"AAAA,OAAOA,KAAP,MAAkC,OAAlC;AAEA,OAAOC,IAAP,MAAiB,sBAAjB;AACA,OAAOC,GAAP,MAAgB,cAAhB;AACA,SAAqBC,eAArB,QAAmG,SAAnG;AAEA,OAAO,MAAMC,SAAS,GAAIC,IAAD,IAAuB,MAAOC,QAAP,IAA0C;AACtF,MAAI;AACA,UAAMC,QAAQ,GAAG,MAAMN,IAAI,CAACO,IAAL,CAA0B,gBAA1B,EAA4CH,IAA5C,CAAvB;AACA,UAAM;AAACI,MAAAA;AAAD,QAAiBF,QAAQ,CAACF,IAAhC;AACAK,IAAAA,YAAY,CAACC,IAAb,GAAoBF,YAApB;AACAG,IAAAA,QAAQ,CAACH,YAAD,EAAeH,QAAf,CAAR;AACA,WAAOO,OAAO,CAACC,OAAR,EAAP;AACH,GAND,CAOA,OAAMC,EAAN,EAAU;AACN,QAAGf,KAAK,CAACgB,YAAN,CAAmBD,EAAnB,CAAH,EACA;AACI,YAAME,WAA2C,GAAGF,EAApD;;AACA,UAAGE,WAAW,IAAIA,WAAW,CAACV,QAA9B,EACA;AACI,cAAM;AAACF,UAAAA;AAAD,YAASY,WAAW,CAACV,QAA3B;AACA,eAAOM,OAAO,CAACK,MAAR,CAAeb,IAAf,CAAP;AACH;AACJ;;AACD,WAAOQ,OAAO,CAACK,MAAR,CAAeH,EAAf,CAAP;AACH;AACJ,CApBM;AAsBP,OAAO,MAAMH,QAAQ,GAAG,CAACO,KAAD,EAAgBb,QAAhB,KAAoD;AACxE,QAAMc,IAAI,GAAGlB,GAAG,CAACmB,MAAJ,CAAWF,KAAX,CAAb;AACAb,EAAAA,QAAQ,CAAC;AACPgB,IAAAA,IAAI,EAAEnB,eAAe,CAACoB,UADf;AAEPC,IAAAA,OAAO,EAAEJ;AAFF,GAAD,CAAR;AAIH,CANM;KAAMR,Q","sourcesContent":["import axios, { AxiosError } from 'axios';\r\nimport { Dispatch } from 'react';\r\nimport http from '../../../http_common';\r\nimport jwt from 'jsonwebtoken';\r\nimport { AuthAction, AuthActionTypes, ILoginModel, ILoginResponse, ILoginServerError, IUser } from './types';\r\n\r\nexport const LoginUser = (data: ILoginModel) => async (dispatch: Dispatch<AuthAction>) => {\r\n    try {\r\n        const response = await http.post<ILoginResponse>(\"api/auth/login\", data);\r\n        const {access_token} = response.data;\r\n        localStorage.girl = access_token;\r\n        AuthUser(access_token, dispatch);\r\n        return Promise.resolve();\r\n    }\r\n    catch(ex) {\r\n        if(axios.isAxiosError(ex))\r\n        {\r\n            const serverError : AxiosError<ILoginServerError> = ex;\r\n            if(serverError && serverError.response)\r\n            {\r\n                const {data} = serverError.response;\r\n                return Promise.reject(data);\r\n            }\r\n        }\r\n        return Promise.reject(ex);\r\n    }\r\n}\r\n\r\nexport const AuthUser = (token: string, dispatch: Dispatch<AuthAction>) =>  {\r\n    const user = jwt.decode(token) as IUser;\r\n    dispatch({\r\n      type: AuthActionTypes.LOGIN_AUTH,\r\n      payload: user,\r\n    });\r\n}"]},"metadata":{},"sourceType":"module"}