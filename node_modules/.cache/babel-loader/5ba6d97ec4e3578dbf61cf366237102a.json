{"ast":null,"code":"var _jsxFileName = \"D:\\\\Laravel_Front\\\\src\\\\components\\\\auth\\\\Login\\\\index.tsx\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport { Form, FormikProvider, useFormik } from \"formik\";\nimport { LoginSchema } from './validation';\nimport { InputGroup } from '../../common/InputGroup';\nimport { useNavigate } from \"react-router\";\nimport { useActions } from \"../../../hooks/useActions\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst LoginPage = () => {\n  _s();\n\n  const {\n    LoginUser\n  } = useActions();\n  const navigator = useNavigate();\n  const [invalid, setInvalid] = useState(\"\");\n  const initialValues = {\n    email: \"\",\n    password: \"\",\n    invalid: \"\"\n  };\n\n  const onHandleSubmit = async (values, _ref) => {\n    let {\n      setFieldError\n    } = _ref;\n\n    try {\n      setLoading(true); // починаєм загрузку\n\n      await LoginUser(values); // кідаєм дані в екшн\n\n      await navigator(\"/\"); // переходим на головну\n\n      await setLoading(false); // закінчуєм загрузку\n    } catch (errors) {\n      setLoading(false); // закінчуєм хибну загрузку\n\n      const serverErrors = errors; //витягуєм помилки згідно інтерфейсу ILoginError\n\n      const {\n        password,\n        invalid\n      } = serverErrors; //створюєм змінні для перевірки\n\n      if (password !== undefined) {\n        //перевіряємо чи є помилки для пароля\n        setFieldError(\"password\", password[0]);\n      }\n\n      console.log(invalid.length);\n\n      if (invalid !== undefined) {\n        //перевіряємо чи є стороні помилки\n        setFieldError(\"invalid\", invalid[0]);\n      }\n    }\n  };\n\n  const formik = useFormik({\n    initialValues: initialValues,\n    validationSchema: LoginSchema,\n    onSubmit: onHandleSubmit\n  });\n  const {\n    errors,\n    touched,\n    handleChange,\n    handleSubmit\n  } = formik;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"row\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"col-md-6 offset-md-3\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Login page\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), invalid && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"alert alert-danger\",\n        children: invalid\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(FormikProvider, {\n        value: formik,\n        children: /*#__PURE__*/_jsxDEV(Form, {\n          onSubmit: handleSubmit,\n          children: [/*#__PURE__*/_jsxDEV(InputGroup, {\n            field: \"email\",\n            label: \"\\u041F\\u043E\\u0448\\u0442\\u0430\",\n            error: errors.email,\n            touched: touched.email,\n            onChange: handleChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(InputGroup, {\n            field: \"password\",\n            label: \"\\u041F\\u0430\\u0440\\u043E\\u043B\\u044C\",\n            type: \"password\",\n            touched: touched.password,\n            error: errors.password,\n            onChange: handleChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            className: \"btn btn-success\",\n            children: \"\\u0412\\u0445\\u0456\\u0434\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n};\n\n_s(LoginPage, \"CqtE04l2Q25mhj6Yvn9SXFVdzF4=\", false, function () {\n  return [useActions, useNavigate, useFormik];\n});\n\n_c = LoginPage;\nexport default LoginPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"LoginPage\");","map":{"version":3,"sources":["D:/Laravel_Front/src/components/auth/Login/index.tsx"],"names":["useState","Form","FormikProvider","useFormik","LoginSchema","InputGroup","useNavigate","useActions","LoginPage","LoginUser","navigator","invalid","setInvalid","initialValues","email","password","onHandleSubmit","values","setFieldError","setLoading","errors","serverErrors","undefined","console","log","length","formik","validationSchema","onSubmit","touched","handleChange","handleSubmit"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\nimport { Form, FormikProvider, FormikHelpers, useFormik } from \"formik\";\nimport {ILoginModel, ILoginErrors} from './types';\nimport {LoginSchema} from './validation';\nimport {InputGroup} from '../../common/InputGroup';\nimport { useNavigate } from \"react-router\";\nimport { useActions } from \"../../../hooks/useActions\";\nimport EclipseWidget from '../../common/eclipse';\n\nconst LoginPage = () => {\n  const { LoginUser } = useActions();\n  const navigator = useNavigate();\n\n  const [invalid, setInvalid] = useState(\"\");  \n\n  const initialValues: ILoginModel = {\n    email: \"\",\n    password: \"\",\n    invalid: \"\"\n  };\n\n  \n  const onHandleSubmit = async (values: ILoginModel, { setFieldError }: FormikHelpers<ILoginModel>) => {\n    try {\n      setLoading(true); // починаєм загрузку\n      await LoginUser(values); // кідаєм дані в екшн\n      await navigator(\"/\"); // переходим на головну\n      await setLoading(false); // закінчуєм загрузку\n    } \n    catch (errors) {\n      setLoading(false); // закінчуєм хибну загрузку\n      const serverErrors = errors as ILoginErrors; //витягуєм помилки згідно інтерфейсу ILoginError\n      const { password, invalid } = serverErrors; //створюєм змінні для перевірки\n\n      if (password !== undefined) { //перевіряємо чи є помилки для пароля\n        setFieldError(\"password\", password[0]);\n      }\n      console.log(invalid.length);\n      \n      if (invalid !== undefined){ //перевіряємо чи є стороні помилки\n        setFieldError(\"invalid\", invalid[0]);\n      }\n    }\n  };\n\n  const formik = useFormik({\n    initialValues: initialValues,\n    validationSchema: LoginSchema,\n    onSubmit: onHandleSubmit,\n  });\n\n  const { errors, touched, handleChange, handleSubmit } = formik;\n\n  return (\n    <div className=\"row\">\n      <div className=\"col-md-6 offset-md-3\">\n        <h1>Login page</h1>\n        \n        {invalid && <div className=\"alert alert-danger\">{invalid}</div>}\n\n        <FormikProvider value={formik}>\n          <Form onSubmit={handleSubmit}>\n            <InputGroup\n              field=\"email\"\n              label=\"Пошта\"\n              error={errors.email}\n              touched={touched.email}\n              onChange={handleChange}\n            />\n\n            <InputGroup\n              field=\"password\"\n              label=\"Пароль\"\n              type=\"password\"\n              touched={touched.password}\n              error={errors.password}\n              onChange={handleChange}\n            />\n\n            <button type=\"submit\" className=\"btn btn-success\">\n              Вхід\n            </button>\n          </Form>\n        </FormikProvider>\n      </div>\n    </div>\n  );\n};\n\nexport default LoginPage;\n"]},"metadata":{},"sourceType":"module"}